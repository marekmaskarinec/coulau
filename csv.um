// You can prefix newline/comma by a backslash to excape it.

fn readStr(src: str, from: int, until: char): int {
	for i:=from; i < len(src); i++ {
		if src[i] == '\\' {
			continue
		}

		if src[i] == until {
			return i - from
		}
	}

	return -1
}

// Decodes a csv string to a 2d array of strings.
fn decode*(src: str): [][]str {
	out := [][]str{[]str{}}
	rowi := 0
	coli := 0

	for i:=0; i < len(src); i++ {
		start := i
		out[rowi] = append(out[rowi], "")

		for a:=0; i < len(src); i++ {
			switch src[i] {
			case '\\':
				out[rowi][coli] += slice(src, start, i)
				i++
				start = i
				continue
			case ',':
				out[rowi][coli] += slice(src, start, i)
				coli++
				break
			case '\n':
				out[rowi][coli] += slice(src, start, i)
				out = append(out, []str{})
				coli = 0
				rowi++
				break
			}
		}
	}

	return out
}

// Encodes a 2d array of strings into csv
fn encode*(src: [][]str): str {
	out := ""
	for i:=0; i < len(src); i++ {
		for j:=0; j < len(src[i]); j++ {
			for ci:=0; ci < len(src[i][j]); ci++ {
				if src[i][j][ci] == '\n' || src[i][j][ci] == ',' {
					out += "\\"
				}

				out += src[i][j][ci]
			}

			out += ","
		}

		out += "\n"
	}

	return out
}

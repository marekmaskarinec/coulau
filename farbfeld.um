
// ignore me. wip

import (
	"std.um"								
)

const (
	SUCCESS* = 0
	FILE_ERROR* = 1
	MAGIC_BYTE_ERROR* = 2
	WIDTH_ERROR* = 3
	HEIGHT_ERROR* = 4	
)

var counter: int

fn peekstr(f: std.File, next: int): str {
	tr := "" 
	for i:=0; i < next; i++ {
		var c: char
		fscanf(f, "%c", &c)
		tr += str(c)
		counter++
	}

	return tr
}

fn peek(f: std.File, next: int): int {
	tr := 0

	for i:=0; i < next; i++ {
		var c: char
		fscanf(f, "%c", &c)
		tr += int(c) << (8 * (next - i - 1))
		counter++
	}

	return tr
}

fn load*(path: str): ([]uint16, int, int, int) {
	f := std.fopen(path, "r")
	if f == null {
		return []uint16{}, -1, -1, FILE_ERROR
	}

	var w, h: int
	var tr: []uint16

	counter = 0

	for i:=0; i < 18 {
		switch i {
		case 0:
			if val := peekstr(f, 8); val != "farbfeld" {
				return []uint16{}, -1, -1, MAGIC_BYTE_ERROR
			}
			i += 8
		case 8:
			w = peek(f, 4)

			if w < 0 {
				return []uint16{}, -1, -1, WIDTH_ERROR
			}

			i += 4
		case 12:
			h = peek(f, 4)


			if h < 0 {
				return []uint16{}, -1, -1, HEIGHT_ERROR
			}

			tr = make([]uint16, w * h * 4)
			printf("allocated %d * %d, which is %d\n", w, h, w * h)

			i += 4
		default:
			for j:=0; j < w * h * 4; j++ {
				//printf("%d\n", j)
				//tr[j] = peek(f, 4)
				printf("%x\n", uint16(peek(f, 2)))
			}
			break
			i += 4
		}
	}

	return tr, w, h, SUCCESS
}
